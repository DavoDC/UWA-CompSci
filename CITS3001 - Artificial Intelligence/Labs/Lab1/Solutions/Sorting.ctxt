#BlueJ class context
comment0.target=Sorting
comment1.params=
comment1.target=Sorting()
comment10.params=original\ alg
comment10.target=double\ runAndTimeSort(int[],\ int)
comment10.text=\r\n\ Calls\ and\ times\ one\ sorting\ algorithm\ denoted\ by\ alg,\ \r\n\ checks\ the\ result,\ and\ returns\ the\ time\ in\ nanoseconds.\r\n
comment11.params=x
comment11.target=double\ round(double)
comment11.text=\r\n\ Rounds\ nanoseconds\ to\ milliseconds,\ to\ one\ decimal\ place.\ \r\n
comment12.params=
comment12.target=void\ compareSorts()
comment12.text=\r\n\ Creates\ the\ data,\ calls\ and\ times\ each\ sorting\ algorithm,\ \r\n\ checks\ all\ results,\ and\ tabulates\ the\ output\ times\ in\ milliseconds.\ \r\n
comment2.params=xs
comment2.target=void\ insertSort(int[])
comment2.text=\r\n\ Sorts\ xs\ in-place\ using\ insert\ sort.\r\n
comment3.params=xs\ i\ j
comment3.target=void\ swap(int[],\ int,\ int)
comment3.text=\r\n\ Swaps\ xs[i]\ and\ xs[j].\r\n
comment4.params=xs\ l\ u
comment4.target=int\ partition(int[],\ int,\ int)
comment4.text=\r\n\ Partitions\ xs[l..u]\ inclusive\ in-place\ around\ the\ pivot\ xs[u]\ \r\n\ and\ returns\ the\ final\ location\ of\ the\ pivot.\r\n\ (Using\ a\ pre-determined\ pivot\ is\ not\ ideal...)\r\n
comment5.params=xs\ l\ u
comment5.target=void\ qsort(int[],\ int,\ int)
comment5.text=\r\n\ Sorts\ xs[l..u]\ inclusive\ in-place\ using\ quick\ sort.\r\n
comment6.params=xs
comment6.target=void\ quickSort(int[])
comment6.text=\r\n\ Sorts\ xs\ in-place\ using\ quick\ sort.\r\n
comment7.params=xs
comment7.target=void\ radixSort(int[])
comment7.text=\r\n\ Sorts\ xs\ in-place\ using\ radix\ sort\ (https\://en.wikipedia.org/wiki/Radix_sort).\ \r\n\ This\ version\ assumes\ all\ elements\ are\ non-negative\:\ we\ could\ fix\ this\ \r\n\ by\ shifting\ all\ elements\ up\ by\ N,\ where\ -N\ is\ the\ smallest\ number,\ \r\n\ then\ shifting\ them\ back\ after\ sorting.\ \r\n
comment8.params=size
comment8.target=int[]\ generateRandomArray(int)
comment8.text=\r\n\ Returns\ an\ array\ of\ length\ size\ containing\ random\ values\ in\ 0..9999.\r\n
comment9.params=s\ xs\ ys
comment9.target=void\ validateSort(java.lang.String,\ int[],\ int[])
comment9.text=\r\n\ Checks\ that\ ys\ is\ a\ sorted\ version\ of\ xs.\r\n\ Cheats\ by\ using\ the\ built-in\ sort\ on\ a\ copy\ of\ xs.\ \:)\ \r\n
numComments=13
